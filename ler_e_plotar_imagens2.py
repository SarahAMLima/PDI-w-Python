# -*- coding: utf-8 -*-
"""Ler e Plotar Imagens.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/109HIdd0pjKUfbvHufd1tqVUVw1GT2VRH
"""

!pip install gdal
!pip install rasterio

"""**TIFFFILE**
Vamos usar uma biblioteca nativa do Python para ler arquivos tiff que são as imagens que queremos ler
"""

import tifffile as tif

import numpy as np

img = tif.imread('/content/drive/MyDrive/Python/PDI com Python/Módulo 2/PDicPython - Imagens/L71221071_07120010720_DN.tif')
print(img)
img.shape

"""Ele leu a imagem na forma de matriz como nos mostra a função print e, 
ele me deu o fomato linha, coluna e bandas da imagem com a função shape
"""

import matplotlib.pyplot as plt
plt.imshow(img[:,:,3], cmap='Greys_r') #vai plotar a imagem em si, porém ele não plota imagens com múltiplas bandas então para contornar isso usamos :,:,0 
                       #: significa todas as linhas, : todas as colunas e "0" é o índice da banda que queremos, p.ex., banda 1 = id 0.
                       # podemos trocar as cores usando o cmap.

"""Agora queremos trabalhar com uma composição de bandas, para isso utilizaremos uma biblioteca nova, a spectral, a qual precisa ser instalada"""

!pip install spectral

"""Agora da spectral só vamos utilizar um método, o imshow, para ver essa composição de imagens então vamos importar apenas ele"""

from spectral import imshow

imshow(img) #só com isso ele já plota algo mas com as bandas em ordens aleatórias

imshow(img, bands=(2,3,0)) #se usarmos o parâmetro bands conseguimos brincar com a composição das bandas. Só precisamos nos atentar aos id
                            #de cada banda

"""Essa é a maneira mais simples de plotar uma imagem de satélite, porém perdemos uma informaçã importante, as coordenadas. Nas imagens acima os eixos x, y são os pixels e não as coordenadas das bandas e/ou imagem.

Segunda maneira de plotar uma imagem...

**GDAL**

Precisa importar essa função a partir da biblioteca osgeo
"""

from osgeo import gdal

img2 = gdal.Open('/content/drive/MyDrive/Python/PDI com Python/Módulo 2/PDicPython - Imagens/L71221071_07120010720_DN.tif')

"""Vamos agora tentar plotar essa imagem. """

print(img2)

"""Aparentemente img 2 não está num formato legível pela numpy. Vamos tentar plotar."""

imshow(img2)

"""De fato não está dentro do formato numpy"""

img3 = img2.ReadAsArray()

"""Transformando esse dado para formato numpy ao atribui-los a uma nova variável, conseguimos plotar?"""

imshow(img3)

"""Podemos ver que ele está plotando mas como uma linha e não uma imagem, isso acontece porque há algum erro no processo. 
Vamos ver qual o formato do shape img3
"""

img3.shape

"""Então olhe lá, ele está colocando as dimensões das bandas "6" no começo ao invés do final, então precisamos corrigir isso. 

Podemos burlar isso trocando a dimensão da imagem pela dimensão da coluna com a função swapaxes. 
"""

img3 = img3.swapaxes(0,2) #estou trocando o "6" pelo "1520"

img3 = img3.swapaxes(0,1) #Estou trocando o "1520" pelo "1233"

"""Agora sim temos o fomato "linhas, colunas, dimensão"
"""

img3.shape

imshow(img3[:,:,3])

"""Agora está coerreto. Podemos agora escolher quais bandas queremos visualizar. Nesse caso não precisamos especificar band;bandas basta colocarmos os números para a composição. """

imshow(img3, (2,3,1))

"""Outra maneira de contornar esse questão do gdal, ou seja, transformar para numpy array seria ler as bandas separadas no gdal, depois converter uma-a-uma e ai sim, empilhá-las. 
Não esquecer que o GDAL começa as bandas chamando de 1 e não 0 como o python. 
"""

b1 = img2.GetRasterBand(1).ReadAsArray() #GetRasterBand vai pegar uma banda específica
b2 = img2.GetRasterBand(2).ReadAsArray()
b4 = img2.GetRasterBand(4).ReadAsArray()

stack = np.dstack([b1,b2,b4])

stack.shape

"""Chegamos no mesmo resultado de antes. Agora podemos apenas copiar o comando de impressão de antes. Mas eu só fiz a composição de 3 bandas, a 1,2 e 4 que em índices viram 0, 1 e 2. """

imshow(stack, (1,2,0))

"""Agora a última metodologia para ler a imagem seria 

**RASTERIO**
"""

import rasterio
from rasterio.plot import show

rst = rasterio.open('/content/drive/MyDrive/Python/PDI com Python/Módulo 2/PDicPython - Imagens/L71221071_07120010720_DN.tif')

show(rst)

"""A rasterio já tem um módulo próprio para plotar essas imagens, o método "show" que importamos do módulo "rasterio.plot". Inclusive a imagem já está plotada com as coordenadas UTM. """

b1 = rst.read(1)
b2 = rst.read(2)
b4 = rst.read(4)

stack = np.dstack([b1,b2,b4])

imshow(stack, (1,2,0))

"""A maneira mais usada é essa do rasterio mas usando o comando **with**. Dentro do with vamos fazer as transformações idênticas aos passos anteriores, a única diferença é que depois que o with é executado ele vai deletar traços dessa manipulação, salvando memória e diminindo as chances de dar erros de memória mais tarde. """

with rasterio.open('/content/drive/MyDrive/Python/PDI com Python/Módulo 2/PDicPython - Imagens/L71221071_07120010720_DN.tif') as rst:
  b1 = rst.read(1)
  b2 = rst.read(2)
  b4 = rst.read(4)
stack2 = np.dstack([b1,b2,b4])

imshow(stack, (1,2,0))